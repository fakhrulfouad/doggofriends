{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/ErrorBoundary.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","dogs","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","ErrorBoundary","props","state","hasError","error","info","this","setState","children","Component","Scroll","style","overflow","border","height","App","onSearchChange","event","target","value","fetch","then","response","json","users","filteredDoggos","filter","toLowerCase","includes","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"sOAceA,EAZF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GACzB,OACI,yBAAKC,UAAU,uDACX,yBAAKC,IAAI,SAASC,IAAG,uCAAkCH,KACvD,6BACI,4BAAKF,GACL,2BAAIC,MCcLK,EAnBE,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAChB,OACE,6BAEIA,EAAKC,KAAI,SAACC,EAAMC,GACd,OACE,kBAAC,EAAD,CACEC,IAAKD,EACLR,GAAIK,EAAKG,GAAGR,GACZF,KAAMO,EAAKG,GAAGV,KACdC,MAAOM,EAAKG,GAAGT,aCEhBW,EAbG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAC7B,OACI,yBAAKX,UAAU,OACf,2BACAA,UAAU,sCACVY,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCeHI,G,wDArBX,WAAaC,GAAQ,IAAD,8BAChB,cAAOA,IACFC,MAAQ,CACTC,UAAU,GAHE,E,8DAONC,EAAMC,GACpBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAIzB,OAAIG,KAAKJ,MAAMC,SACJ,sDAGJG,KAAKL,MAAMO,a,GAjBMC,cCQbC,EARA,SAACT,GACd,OACE,yBAAKU,MAAO,CAAEC,SAAU,SAAUC,OAAQ,kBAAmBC,OAAQ,UAClEb,EAAMO,WCyCEO,E,kDArCX,aAAgB,IAAD,8BACX,gBAaJC,eAAiB,SAACC,GACd,EAAKV,SAAS,CAACZ,YAAasB,EAAMC,OAAOC,SAbzC,EAAKjB,MAAQ,CACTb,KAAM,GACNM,YAAa,IAJN,E,gEAQM,IAAD,OAChByB,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAU,EAAKjB,SAAS,CAAElB,KAAMmC,S,+BAOjC,IAAD,OACAC,EAAiBnB,KAAKJ,MAAMb,KAAKqC,QAAO,SAAArC,GAC1C,OAAOA,EAAKP,KAAK6C,cAAcC,SAAS,EAAK1B,MAAMP,YAAYgC,kBAEvE,OACI,yBAAK1C,UAAU,MACX,wBAAIA,UAAU,MAAd,iBACA,uBAAGA,UAAU,YAAb,sCACA,kBAAC,EAAD,CAAWW,aAAcU,KAAKU,iBAC9B,kBAAC,EAAD,KACA,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAU3B,KAAMoC,W,GA/BZhB,aCKEoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACT,kBAAC,EAAD,MACEC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnB,MAAK,SAAAoB,GACJA,EAAaC,gBAEdC,OAAM,SAAAvC,GACLwC,QAAQxC,MAAMA,EAAMyC,a","file":"static/js/main.6370351d.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ name, email, id }) => {\n    return (\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n            <img alt='Doggos' src={`https://placedog.net/200/200/${id}`} />\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ dogs }) => {\n    return (\n      <div>\n        {\n          dogs.map((user, i) => {\n            return (\n              <Card\n                key={i}\n                id={dogs[i].id}\n                name={dogs[i].name}\n                email={dogs[i].email}\n                />\n            );\n          })\n        }\n      </div>\n    );\n  }\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({searchfield, searchChange}) => {\n    return (\n        <div className='pa2'>\n        <input \n        className='tc pa3 ba b--green bg-lightest-blue' \n        type='search' \n        placeholder='Search Doggos' \n        onChange={searchChange}\n        />\n        </div>\n    );\n}\n\nexport default SearchBox;","import React, {Component} from 'react';\n\nclass ErrorBoundary extends Component {\n    constructor (props) {\n        super (props);\n        this.state = {\n            hasError: false\n        }\n    }\n\ncomponentDidCatch(error,info) {\n    this.setState({hasError: true})\n}\n\nrender () {\n    if (this.state.hasError) {\n        return <h1>Oops, that is not good</h1>\n    }\n\n    return this.props.children\n}\n\n}\n\nexport default ErrorBoundary;","import React from 'react';\n\nconst Scroll = (props) => {\n  return (\n    <div style={{ overflow: 'scroll', border: '5px solid black', height: '800px'}}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;","import React, {Component} from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport './App.css';\nimport ErrorBoundary from '../components/ErrorBoundary';\nimport Scroll from '../components/Scroll';\n\nclass App extends Component {\n    \n    constructor () {\n        super ()\n        this.state = {\n            dogs: [],\n            searchfield: ''\n        }\n    }\n\n    componentDidMount() {\n        fetch('https://jsonplaceholder.typicode.com/users')\n          .then(response=> response.json())\n          .then(users => {this.setState({ dogs: users})});\n      }\n\n    onSearchChange = (event) => {\n        this.setState({searchfield: event.target.value})\n    }\n\n    render () {\n        const filteredDoggos = this.state.dogs.filter(dogs => {\n            return dogs.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\n        })\n    return (\n        <div className='tc'>\n            <h1 className='f1' >Doggo Friends</h1>\n            <p className='f2 title' >Connect with Nearby Furry Friends!</p>\n            <SearchBox searchChange={this.onSearchChange} />\n            <Scroll>\n            <ErrorBoundary>\n              <CardList dogs={filteredDoggos} />\n            </ErrorBoundary>\n          </Scroll>\n        </div>\n      );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(\n<App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}